/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package practicing;

import org.w3c.dom.ls.LSOutput;

import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Locale;

public class Library {
    public static void main(String[] args) {
//        System.out.println("hi");
//        repeatedWord("hi my name is slim shady hi");
        int arr[] = {1, 2, 3, 4, 7,9,8};
//        System.out.println(repeatedIntegerIndex(arr));
//        System.out.println(repeatedIntegerIndex2(arr));
//        System.out.println(swap(5,6));
        int array[] = {2,3,4,10,7,9,8,6,5};
        System.out.println(secondMax(arr));
        System.out.println(largerNumers(array));
    }

    //////////////////////repeated word///////////////////////////
    public static String repeatedWord(String strings) {
        String lowerCased = strings.toLowerCase(Locale.ROOT);
        String[] stringArr = lowerCased.split(" ");
        Hashtable<String, Integer> hashMap = new Hashtable<String, Integer>();
        for (String element : stringArr) {

            if (element.contains(",")) {
                element = element.substring(0, element.length() - 1);
            }
            if (!element.equals("")) {
                int counter = hashMap.get(element) != null ? hashMap.get(element) : 0;

                if (counter == 1) {
                    return element;
                }
                hashMap.put(element, counter + 1);
            }
        }

        return "None";
    }

    /////////////////////////////////////first repeated integer from beginning //////////////
    public static int repeatedIntegerIndex(int arr[]) {
        Hashtable<Integer, Integer> hashtable = new Hashtable<>();
        int count;
        int hi = -1;
        for (int i = arr.length - 1; i >= 0; i--) {
            if (hashtable.get(arr[i]) != null) {
                count = hashtable.get(arr[i]);
            } else {
                count = 0;
            }
            if (count == 1) {
                return i;
            }
            hashtable.put(arr[i], count + 1);
        }
        return hi;
    }

    ///////////////////////////first repeated integer from the end///////////////
    public static int repeatedIntegerIndex2(int arr[]) {
        Hashtable<Integer, Integer> hashtable = new Hashtable<>();
        int count;
        int hi = -1;
        for (int i = 0; i < arr.length; i++) {
            if (hashtable.get(arr[i]) != null) {
                count = hashtable.get(arr[i]);
            } else {
                count = 0;
            }
            if (count == 1) {
                return i;
            }
            hashtable.put(arr[i], count + 1);
        }
        return hi;
    }

    //////////////////////// swap 2 integers without declaring a new variable/////////////
    public static int swap(int a, int b) {
        a = 5;
        b = 6;

        a = a + b;
        b = a - b;
        a = a - b;

        return a;
    }
    ////////////////////////// return third integer in an array ////////////////
    public static int secondMax(int arr[]) {
        int max = arr[0];
        int secondMax = arr[0];
        int third=arr[0];
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > max) {
                third=secondMax;
                secondMax = max;
                max = arr[i];
            } else if (arr[i] > secondMax) {
                third=secondMax;
                secondMax = arr[i];
            }else if (arr[i] > third) {
                third = arr[i];
            }
        }
        return third;
    }
///////// return a new array of the numbers that have no larger numbers on their right//////
//int arr[] = {1,2,3,4,7,9,8,6,5};

    public static ArrayList largerNumers(int arr[]){
        ArrayList list = new ArrayList<>();
        int max = arr[arr.length-1];
        list.add(max);
        for(int i =arr.length-1; i >=0 ; i--){
            if(arr[i] > max){
                list.add(arr[i]);
                max = arr[i];
            }
        }
        return list;
    }

}